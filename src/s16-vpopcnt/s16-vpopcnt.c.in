// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$BATCH_TILES = tuple(int(bt) for bt in BATCH_TILES.split(","))
$SIMD_SIZE = BATCH_TILES[0]
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include "xnnpack/simd/s16-${ARCH}.h"

#include "xnnpack/common.h"
#include "xnnpack/microparams.h"
#include "xnnpack/vbinary.h"

$for BATCH_TILE in BATCH_TILES:
  $assert BATCH_TILE % SIMD_SIZE == 0
  $assert BATCH_TILE >= SIMD_SIZE
  $SIMD_TILE = BATCH_TILE // SIMD_SIZE

  void xnn_s16_vpopcnt_ukernel__${ARCH}_u${BATCH_TILE}(
      size_t batch,
      const int16_t* input,
      int16_t* output,
      const union xnn_s16_default_params params[restrict XNN_MIN_ELEMENTS(1)])
  {
    assert(batch != 0);
    assert(batch % sizeof(int16_t) == 0);
    assert(input != NULL);
    assert(output != NULL);
    assert(xnn_simd_size_s16 == ${SIMD_SIZE});

    $if SIMD_TILE > 1:
      for (; batch >= ${BATCH_TILE} * sizeof(int16_t); batch -= ${BATCH_TILE} * sizeof(int16_t)) {
        xnn_simd_s16_t vin_${ABC[0]} = xnn_loadu_s16(input);
        $for N in range(1, SIMD_TILE):
          xnn_simd_s16_t vin_${ABC[N]} = xnn_loadu_s16(input + ${N} * xnn_simd_size_s16);
        input += ${BATCH_TILE};

        $for N in range(0, SIMD_TILE):
          xnn_simd_s16_t vy_${ABC[N]} = xnn_popcnt_s16(vin_${ABC[N]});

        xnn_storeu_s16(output, vy_${ABC[0]});
        $for N in range(1, SIMD_TILE):
          xnn_storeu_s16(output + ${N} * xnn_simd_size_s16, vy_${ABC[N]});
        output += ${BATCH_TILE};
      }
    for (; batch >= xnn_simd_bytes_s16; batch -= xnn_simd_bytes_s16) {
      xnn_simd_s16_t vin = xnn_loadu_s16(input);
      input += xnn_simd_size_s16;

      xnn_simd_s16_t vy = xnn_popcnt_s16(vin);

      xnn_storeu_s16(output, vy);
      output += xnn_simd_size_s16;
    }
    $if SIMD_SIZE > 1:
      if XNN_UNLIKELY(batch != 0) {
        xnn_simd_s16_t vin = xnn_load_tail_s16(input, batch >> XNN_LOG2_SIZEOF_INT16_T);

        xnn_simd_s16_t vy = xnn_popcnt_s16(vin);

        xnn_store_tail_s16(output, vy, batch >> XNN_LOG2_SIZEOF_INT16_T);
      }
  }
  